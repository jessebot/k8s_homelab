---
smol_k8s_lab:
  # this is useful for learning smol-k8s-lab or verifying your configuration
  tui:
    # if this is set to true, we'll always launch smol-k8s-lab in interactive mode :)
    # else you need to pass in --interactive or -i to use the interactive Terminal UI
    enabled: true
    # show bottom footer help bar
    show_footer: true
    # accessibility options
    accessibility:
      # wether or not to ring the built in terminal bell when something is wrong
      bell:
        on_focus: true
        on_error: true
      text_to_speech: 
        # use a specific program for text to speech - this needs to be a full path
        # macOS default: say
        # linux default: eSpeak
        speech_program: say
        # read the screen title and description
        screen_titles: true
        # read the element aloud each time you switch focus to a new element
        on_focus: false
        # press shift+s to read the element id and value/tooltip
        on_key_press: true

    # enable text to speech
    # k9s is a terminal UI dashboard and interface for interacting with Kubernetes
    k9s:
      # when set to true, if smol-k8s-lab is in interactive mode, it runs k9s
      # immediately after the cluster is up and enabled apps have been installed
      enabled: false
      # default command to run when k9s launches. defaults to application.argoproj.io
      # so that you can view the status of all of your argo apps immediately. This
      # default results in running: k9s --command applications.argoproj.io
      command: applications.argoproj.io

  # logging config for the smol-k8s-lab CLI
  log:
    # path of file to log to if console logging is NOT desired
    file: ""
    # logging level, Options: debug, info, warn, error
    level: debug

  # store your password and tokens directly in your local password manager
  local_password_manager:
    enabled: false
    # enable the use of bitwarden as your password manager.
    # To use Bitwarden, you must export the following environment variables:
    # BW_PASSWORD, BW_CLIENTID, BW_CLIENTSECRET, BW_SESSION
    # If you're missing any of these, smol-k8s-lab will prompt for them
    name: bitwarden
    # if existing items are found in your password manager, do one of:
    #
    # ask: (default in tui mode) display a dialog window asking you how to proceed
    # edit: edit item, if there's one item found, ask if multiple found
    # duplicate: create an additional item with the same name
    # no_action: don't do anything, just continue on with the script
    duplicate_strategy: ask

# which distros of Kubernetes to deploy. Options: kind, k3s, k3d
# NOTE: only kind and k3d are available on macOS at this time
k8s_distros:
  k3s:
    # set to true to enable deploying a kubernetes cluster using k3s
    enabled: false
    # if k8s_distro set to k3s/k3d, you can add an array of extra arguments to pass
    # to the k3s install script as a k3s.yaml file. If you enable cilium, we
    # automatically pass in flannel-backend: none and disable-network-policy: true 
    k3s_yaml:
      # if you enable metallb, we automatically add servicelb to the disable list
      # enables encryption at rest for kubernetes secrets
      secrets-encryption: true
      # disables traefik so we can enable ingress-nginx, remove if you're using traefik
      disable:
      - "traefik"
      node-label:
      - "ingress-ready=true"
      kubelet-arg:
      - "max_pods=150"
    # not yet adjustable on k3s at this time
    nodes:
      control_plane: 1
      workers: 0

  k3d:
    # set to true to enable deploying a kubernetes cluster using k3d
    enabled: false
    # if k8s_distro set to k3s/k3d, you can add an array of extra arguments to pass
    # to the k3s install script as a k3s.yaml file. if you enable cilium, we
    # automatically pass in flannel-backend: none and disable-network-policy: true 
    k3s_yaml:
      # if you enable metallb, we automatically add servicelb to the disable list
      # enables encryption at rest for kubernetes secrets
      secrets-encryption: true
      # disables traefik so we can enable ingress-nginx, remove if you're using traefik
      disable:
      - "traefik"
      kubelet-arg:
      - "max_pods=150"
      node-label:
      - "ingress-ready=true"
    # how many dockerized k3s nodes to deploy
    nodes:
      control_plane: 1
      workers: 0

  kind:
    # set to true to enable deploying a kubernetes cluster using kind
    enabled: false
    # change the kubelet config for this node in k3s, feel free to add more values
    kubelet_extra_args:
      node-labels: "ingress-ready=true"
      maxPods: 110
      podsPerCore: 0
      resolvConf: "/etc/resolv.conf"
    networking_args:
      ipFamily: "ipv4"
      disableDefaultCNI: False
      apiServerAddress: "127.0.0.1"
      podSubnet: "10.244.0.0/16"
    # how many dockerized kind nodes to deploy
    nodes:
      control_plane: 1
      workers: 0

# anything here gets set for all apps if you're using our default repos
apps_global_config:
  # setting this changes all the below domains to use the following cluster_issuer
  # change to letsencrypt-prod when you're ready to go live with your infra
  cluster_issuer: "letsencrypt-staging"

# ---------------------------------------------------------------------------
# Argo CD deployed and maintained Applications to run on Kubernetes
# ---------------------------------------------------------------------------
apps:
  argo_cd:
    # Set to false if you you just want a bare cluster with only the above apps"
    enabled: true
    description: |
      Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.

      Learn more: [link=https://argo-cd.readthedocs.io/en/stable/]https://argo-cd.readthedocs.io/en/stable/[/link]

      smol-k8s-lab installs Argo CD with helm initially to support initial configuration of your admin user and disabling of dex. After your OIDC provider is configured, Argo CD begins managing itself using the below configured Argo CD repo.
    # Initialization of the app through smol-k8s-lab
    init:
      # Switch to false if you don't want to use the appset_secret_plugin
      # but then you can't use the default repo
      enabled: true
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        # FQDN hostname for accessing the ArgoCD web interface
        hostname: ""
        # which oidc provider to use for argo cd: defaults to zitadel
        oidc_provider: "zitadel"
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      # change to argocd/argocd to not use app of apps with secret plugin
      path: "argocd/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "argocd"
      # source repos for Argo CD argo-cd Project (in addition to argo_cd.argo.repo)
      project:
        source_repos:
          - https://argoproj.github.io/argo-helm
          - https://small-hack.github.io/appset-secret-plugin
        destination:
          namespaces:
            - argocd
            - prometheus

  appset_secret_plugin:
    # Required if you want to use the default small-hack/argocd-apps argo.repo and
    # default enabled if ArgoCD is enabled, so we can create a k8s Secret with
    # your more private info such as hostnames, IP addresses, and emails in a
    # deployment that runs alongside ArgoCD to provide Argo CD ApplicationSets
    # This plugin has no ingress and cannot be reached from outside the cluster
    enabled: true
    description: |
      Required if you want to use the default [link="https://github.com/small-hack/argocd-apps"]small-hack/argocd-apps[/link] [gold3]argo.repo[/gold3] and default enabled if ArgoCD is enabled, so we can create a k8s Secret with your more private info such as hostnames, IP addresses, and emails in a deployment that runs alongside ArgoCD to provide Argo CD ApplicationSets This plugin has no ingress and cannot be reached from outside the cluster

      Switch to initialization off if you don't want to deploy a default secret with all keys in each apps.{app}.argo.secret_keys

      Learn more: [link=https://github.com/small-hack/appset-secret-plugin]https://github.com/small-hack/appset-secret-plugin[/link]
    init:
      enabled: true
    argo:
      # secrets keys to make available to ArgoCD ApplicationSet
      secret_keys: {}
      # skip installing this app b/c its part of another app of apps with this
      # name. If equals "" we'll instead use the repo, path, ref, and namespace
      part_of_app_of_apps: "argo_cd"
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "argocd/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "argocd"
      project:
        source_repos:
          - https://small-hack.github.io/appset-secret-plugin
        destination:
          namespaces:
            - argocd

  bitwarden_eso_provider:
    enabled: true
    description: |
      bitwarden external secrets provider is used to store k8s secrets in BitwardenÂ®. This deployment has no ingress and can't be connected to from outside the cluster. There is a networkPolicy that only allows the pod to communicate with the External Secrets Operator in the same namespaces.

      smol-k8s-lab support initialization by creating a kubernetes secret with your Bitwarden credentials so that the provider can unlock your vault. You will need to setup an [link=https://bitwarden.com/help/personal-api-key/]API key[/link] ahead of time. You can pass these credentials in by setting the following environment variables:

      BITWARDEN_PASSWORD, BITWARDEN_CLIENTSECRET, BITWARDEN_CLIENTID

      Learn more: [link="https://github.com/jessebot/bitwarden-eso-provider/"]https://github.com/jessebot/bitwarden-eso-provider/[/link]
    init:
      # Switch to false if you don't want to be prompted for your Bitwarden
      # API credentials to be created as a kubernetes secret.
      enabled: true
    argo:
      # skip installing this app b/c its part of another app of apps with this
      # name. If equals "" we'll instead use the below repo, path, ref, and namespace
      part_of_app_of_apps: "external_secrets_operator"
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "external-secrets-operator/bitwarden"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "external-secrets"
      # optional secrets keys to pass to the argo cd appset secret plugin generator
      secret_keys: {}
      # source repos for Argo CD App Project (in addition to app.argo.repo)
      project:
        # where the helm chart lives. Go here for more info
        source_repos:
          - "https://jessebot.github.io/bitwarden-eso-provider"
        destination:
          namespaces:
            - argocd
            - external-secrets

  # This app is installed with helm or manifests depending on what is recommended
  # for your k8s distro. Becomes managed by ArgoCD if you enable it below
  cert_manager:
    # ! NOTE: you currently can't set this to false. It is necessary to deploy
    # most of our supported Argo CD apps since they often have TLS enabled either
    # for pod connectivity or ingress
    enabled: true
    description: |
      Use LetsEncrypt to generate TLS certs for all your apps with ingress.

      smol-k8s-lab supports initialization by creating two ClusterIssuers for both staging and production using a provided email address as the account ID for acme.

      Learn more: [link=https://cert-manager.io/]https://cert-manager.io/[/link]
    # Initialize of the app through smol-k8s-lab
    init:
      # Deploys staging and prod ClusterIssuers and prompts you for
      # cert-manager.argo.secret_keys if they were not set. Switch to false if
      # you don't want to deploy any ClusterIssuers
      enabled: true
    argo:
      secret_keys:
        # Used for letsencrypt-staging, to generate certs
        email: ""
      # skip installing this app b/c its part of another app of apps with this
      # name. If equals "", we'll instead use the repo, path, ref, namespace
      part_of_app_of_apps: "ingress"
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "ingress/cert-manager/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "ingress"
      # source repos for cert-manager CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - https://charts.jetstack.io
        destination:
          namespaces:
            - argocd
            - ingress

  # This app is installed with helm or manifests depending on what is recommended
  # for your k8s distro. Becomes managed by ArgoCD if you enable it below
  cilium:
    enabled: false
    description: |
      Cilium is an open source, cloud native solution for providing, securing, and observing network connectivity between workloads, fueled by the revolutionary Kernel technology eBPF.

      Learn more: [link=https://cilium.io/]https://cilium.io/[/link]
    # Initialize of the app through smol-k8s-lab
    init:
      enabled: true
    argo:
      secret_keys:
        hostname: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "alpha/cilium/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "cilium"
      # source repos for Argo CD cilium Project
      project:
        source_repos:
          - "https://helm.cilium.io/"
        destination:
          namespaces:
            - argocd
            - cilium

  external_secrets_operator:
    enabled: true
    description: |
      External Secrets Operator is a Kubernetes operator that integrates external secret management systems like HashiCorp Vault, CyberArk Conjur, Bitwarden, Gitlab, and many more. The operator reads information from external APIs and automatically injects the values into a Kubernetes Secret.

      Learn more: [link=https://external-secrets.io/latest/]https://external-secrets.io/latest/[/link]
    # Initialization of the app through smol-k8s-lab
    init:
      enabled: false
    argo:
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      # change to external-secrets-operator/external-secrets-operator/ to deploy
      # ONLY the external-secrets-operator, so this will not use app of apps and
      # therefore we will not deploy the bitwarden eso provider. Use if you want to use
      # a different provider
      path: "external-secrets-operator/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "external-secrets"
      # secret keys to provide for the argocd secret plugin app, none by default
      secret_keys: {}
      # source repos for Argo CD App Project (in addition to app.argo.repo)
      project:
        source_repos:
          - "https://charts.external-secrets.io"
          # you can remove this one if you're not using bitwarden to store your k8s secrets
          - "https://jessebot.github.io/bitwarden-eso-provider"
        destination:
          namespaces:
            - argocd

  infisical:
    enabled: false
    description: |
      â ï¸ [magenta]Alpha Status[/magenta]

      Infisical is an open-source, end-to-end encrypted secret management platform that enables teams to easily manage and sync their env vars.

      Learn more: [link=https://infisical.com/]https://infisical.com/[/link]
    # Initialization of the app through smol-k8s-lab
    init:
      enabled: true
    argo:
      secret_keys:
        hostname: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "infisical/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "infisical"
      # source repos for Argo CD App Project (in addition to app.argo.repo)
      project:
        source_repos:
          - "registry-1.docker.io"
          - "https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/"
        destination:
          namespaces:
            - argocd

  # This app is installed with helm or manifests depending on what is recommended
  # for your k8s distro. Becomes managed by ArgoCD if you enable it below
  ingress_nginx:
    enabled: true
    description: |
      deploy ingress-nginx and cert-manager as one argocd app of apps and project in the same namespace
      Ingress-nginx cannot be disabled unless you provide your own ingress controller app
    argo:
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      # change to "ingress/ingress-nginx/" to not use app of apps
      path: "ingress/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "ingress"
      # secret keys to provide for the argocd secret plugin app, none by default
      secret_keys: {}
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - https://charts.jetstack.io
          - "https://kubernetes.github.io/ingress-nginx"
          - "https://jessebot.github.io/vouch-helm-chart"
          - "https://github.com/kubernetes/ingress-nginx"
        destination:
          namespaces:
            - argocd
            - ingress

  k8tz:
    enabled: false
    description: |
      k8tz is a kubernetes admission controller and a CLI tool to inject timezones into Pods and CronJobs1.

      Containers do not inherit timezones from host machines and have only accessed to the clock from the kernel. The default timezone for most images is UTC, yet it is not guaranteed and may be different from container to container. With k8tz it is easy to standardize selected timezone across pods and namespaces automatically with minimal effort.

      You can find your timezone identifier here: [link=https://wikipedia.org/wiki/List_of_tz_database_time_zones#List]https://wikipedia.org/wiki/List_of_tz_database_time_zones[/link]

      Learn more: [link=https://github.com/k8tz/k8tz]https://github.com/k8tz/k8tz[/link]
    init:
      enabled: true
    argo:
      secret_keys:
        timezone: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "alpha/k8tz/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "k8tz"
      # source repos for Argo CD App Project (in addition to app.argo.repo)
      project:
        source_repos:
          - "https://k8tz.github.io/k8tz/"
        destination:
          namespaces:
            - argocd

  k8up:
    enabled: true
    description: |
      K8up ([i]pronounced "ketchup?"[/]) is a Kubernetes Operator based on Restic for backups of Persistent Volumes in k8s into S3 compatible storage like MinIO. Backs up all PVCs marked as ReadWriteMany, ReadWriteOnce or with a specific label. Can also perform "Application Aware" backups, containing the output of any tool capable of writing to stdout.

      You can also perform individual, on-demand backups, and restores from the k8up CLI tool.
      You can find your timezone identifier here: [link=https://wikipedia.org/wiki/List_of_tz_database_time_zones#List]https://wikipedia.org/wiki/List_of_tz_database_time_zones[/link]

      Learn more: [link=https://k8up.io]https://k8up.io[/link]

    init:
      enabled: true
    argo:
      secret_keys:
        timezone: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "k8up/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "k8up"
      # source repos for Argo CD App Project (in addition to app.argo.repo)
      project:
        source_repos:
          - "https://k8up-io.github.io/k8up"
          - "https://github.com/k8up-io/k8up.git"
        destination:
          namespaces:
            - argocd

  kepler:
    description: |
      Kepler (Kubernetes Efficient Power Level Exporter) uses eBPF to probe energy-related system stats and exports them as Prometheus metrics.

      Learn more: [link=https://github.com/sustainable-computing-io/kepler]https://github.com/sustainable-computing-io/kepler[/link]
    enabled: false
    # Initialization of the app through smol-k8s-lab
    init:
      enabled: false
    argo:
      # secret keys to provide for the argocd secret plugin app, none by default
      secret_keys: {}
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "alpha/kepler/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "kepler"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - "https://sustainable-computing-io.github.io/kepler-helm-chart"
        destination:
          namespaces:
            - argocd

  # keycloak:
  #   enabled: false
  #   description: |
  #     keycloak is an IAM provider that you can use with ArgoCD for user/group management and oauth2
  #     smol-k8s-lab initializes keycloak by creating an initial user & clients for ArgoCD and vouch this will also prompt you for input for creating an admin user. Switch to initialization to false if you want to use your own argo repo that does not not use the appset_secret_plugin or setup an initial user/clients
  #   init:
  #     enabled: true
  #     values:
  #       # first human user to setup
  #       username: ""
  #       first_name: ""
  #       last_name: ""
  #   argo:
  #     # secrets keys to make available to ArgoCD ApplicationSets
  #     secret_keys:
  #       hostname: ""
  #       mail_hostname: ""
  #       default_realm: "default"
  #     # git repo to install the Argo CD app from
  #     repo: "https://github.com/small-hack/argocd-apps"
  #     # path in the argo repo to point to. Trailing slash very important!
  #     path: "keycloak/"
  #     # either the branch or tag to point at in the argo repo above
  #     ref: "main"
  #     # namespace to install the k8s app in
  #     namespace: "keycloak"
  #     # source repos for Argo CD App Project (in addition to argo.repo)
  #     project:
  #       source_repos:
  #         - "registry-1.docker.io"
  #       destination:
  #         namespaces:
  #           - argocd

  kubevirt:
    description: |
      kubevirt lets you manage virtual machines via k8s
  
      Learn more: [link=https://kubevirt.io/]https://kubevirt.io/[/link]
    # default disabled while a helm chart is being actively developed
    enabled: false
    argo:
      # secret keys to provide for the argocd secret plugin app, none by default
      secret_keys: {}
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "kubevirt/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "kubevirt"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos: 
          - "https://github.com/small-hack/argocd-apps"
        destination:
          namespaces:
            - argocd

  kyverno:
    description: |
      Kyverno is a native policy manager for Kubernetes

      learn more: [link=https://kyverno.io/]https://kyverno.io/[/link]
    enabled: false
    argo:
      # secret keys to provide for the argocd secret plugin app, none by default
      secret_keys: {}
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "kyverno/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "kyvero"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos: []
        destination:
          namespaces:
            - argocd

  mastodon:
    description: |
       mastodon is an open source self hosted social media network.

       learn more: [link=https://joinmastodon.org/]https://joinmastodon.org/[/link]

       smol-k8s-lab supports initializing mastodon, by setting up your hostname and SMTP credentials as well as your credentials for redis, postgresql, and an admin user
    enabled: false
    init:
      enabled: true
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        hostname: ""
        mail_hostname: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "mastodon/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "social"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - "registry-1.docker.io"
          - "https://jessebot.github.io/mastodon-helm-chart"
        destination:
          namespaces:
            - argocd

  matrix:
    description: |
      Matrix is an open protocol for decentralised, secure communications.
      This deploys a matrix synapse server, element (web frontend), and turn server (voice)

      Learn more: [link=https://matrix.org/]https://matrix.org/[/link]

      smol-k8s-lab supports initialization by setting up your create initial secrets for your hostnames, and credentials for: postgresql, admin user, SMTP
    enabled: false
    init:
      enabled: true
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        hostname: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "matrix/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "matrix"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - "registry-1.docker.io"
          - "https://jessebot.github.io/matrix-chart"
        destination:
          namespaces:
            - argocd

  # This app is installed with helm or manifests depending on what is recommended
  # for your k8s distro. Becomes managed by ArgoCD if you enable it below
  metallb:
    enabled: true
    description: |
      Helps expose IP addresses for loadbalancers on metal if you're on a vm or container where you can't get an IP.

      Cloud Compatibility: [link=https://metallb.org/installation/clouds/]https://metallb.org/installation/clouds/[/link]

      Learn more: [link=https://metallb.org/]https://metallb.org/[/link]

      smol-k8s-lab support initialization by deploying a default l2Advertisement  IPAddressPool.
    # Initialize of the app through smol-k8s-lab
    init:
      enabled: true
      values:
        address_pool: []
    argo:
      # secret keys to provide for the argocd secret plugin app, none by default
      secret_keys: {}
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "metallb/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "metallb-system"
      # source repos for Argo CD metallb Project (in addition to metallb.argo.repo)
      project:
        source_repos:
          - "https://github.com/metallb/metallb.git"
        destination:
          namespaces:
            - argocd
            - "metallb-system"

  minio:
    enabled: false
    description: |
      MinIOÂ®ï¸ is a high-performance, S3 compatible object store.

      MinIO is dual-licensed under open source GNU AGPL v3 and a commercial enterprise license.

      learn more: [link=https://min.io/]https://min.io/[/link]
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        hostname: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "alpha/minio/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "minio"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos: []
        destination:
          namespaces:
            - argocd

  nextcloud:
    enabled: false
    description: |
      Nextcloud Hub is the industry-leading, fully open-source, on-premises content collaboration platform. Teams access, share and edit their documents, chat and participate in video calls and manage their mail and calendar and projects across mobile, desktop and web interfaces

      Learn more: [link=https://nextcloud.com/]https://nextcloud.com/[/link]

      smol-k8s-lab supports initialization by setting up your admin username, password, and SMTP username and password, as well as your redis and postgresql credentials

      Note: smol-k8s-lab is not officially affiliated with nextcloud or vis versa
    # initialize the app by setting up new k8s secrets and/or bitwarden items
    init:
      enabled: true
      values:
        admin_user: ""
        smtp_user: ""
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        hostname: ""
        backup_method: ""
        backup_s3_endpoint: ""
        backup_s3_bucket: ""
        backup_mount_path: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "nextcloud/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "nextcloud"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - "registry-1.docker.io"
          - "https://nextcloud.github.io/helm"
        destination:
          namespaces:
            - argocd
            - nextcloud

  prometheus:
    description: |
      Full monitoring stack with prometheus, grafana, loki, and alert manager.

      Learn more: [link=https://prometheus.io/docs/introduction/overview/]https://prometheus.io/docs/introduction/overview/[/link]

      smol-k8s-lab supports initialization by setting up your ingress hostnames.

    enabled: true
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        # FQDN to use for Prometheus web interface
        hostname: ""
        # FQDN to use for grafana
        grafana_hostname: ""
        # FQDN to use for Alert Manager web interface
        alert_manager_hostname: ""
        # FQDN to use for the prometheus push gateway
        push_gateway_hostname: ""
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important! This
      # is an app of apps. Change to "monitoring/kube-prometheus-stack/" to
      # only install kube-prometheus-stack (foregoing loki and push gateway)
      path: "prometheus/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "prometheus"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - "registry-1.docker.io"
          - "https://github.com/prometheus-community/helm-charts.git"
          - "https://prometheus-community.github.io/helm-charts"
        destination:
          namespaces:
            - argocd
            - prometheus
            - kube-system

  vouch:
    description: |
      vouch-proxy can help you forward requests for OIDC authentication to any ingress source that doesn't already have it. Super useful for web pages like prometheus's UI.

      smol-k8s-lab supports the initialization of vouch if you also enable zitadel by creating OIDC applications and credentials and your vouch-proxy kubernetes secret.

      Learn more: [link=https://github.com/vouch/vouch-proxy]https://github.com/vouch/vouch-proxy[/link]
    enabled: true
    # Initialization of the app through smol-k8s-lab using bitwarden and/or k8s secrets
    init:
      enabled: true
      values:
        # list of domains allowed to be behind vouch such as example.com
        domains: []
        # - example.com
        # email addresses allowed to authenticate via vouch
        emails: []
        # - beep@boop.com
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        # FQDN to use for vouch
        hostname: ""
      # repo to install the Argo CD app from
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      path: "vouch-proxy/"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "ingress"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - https://jessebot.github.io/vouch-helm-chart
        destination:
          namespaces:
            - argocd

  zitadel:
    enabled: true
    description: |
      ZITADEL is an open source self hosted IAM platform for the cloud era

      Learn more: [link=https://zitadel.com/opensource]https://zitadel.com/opensource[/link]

      smol-k8s-lab supports initialization of:
      - an admin service account
      - a human admin user (including an autogenerated password)
      - 2 OIDC applications for Argo CD and Vouch
      - 2 Argo CD groups (admins and users), 1 vouch groups
      - groupsClaim action to enforce group roles on authentication
      - updates your appset_secret_plugin secret and refreshes the pod
    init:
      # Switch to false if you don't want to create intial secrets or use the
      # API via a service acocunt to create the above described resources
      enabled: true
      values:
        username: ""
        email: ""
        first_name: ""
        last_name: ""
        # options: GENDER_UNSPECIFIED, GENDER_MALE, GENDER_FEMALE, GENDER_DIVERSE
        # more coming soon, see: https://github.com/zitadel/zitadel/issues/6355
        gender: "GENDER_UNSPECIFIED"
    argo:
      # secrets keys to make available to ArgoCD ApplicationSets
      secret_keys:
        # FQDN to use for zitadel
        hostname: ""
        # type of database to use: postgresql or cockroachdb
        database_type: "postgresql"
      # repo to install the Argo CD app from
      # git repo to install the Argo CD app from
      repo: "https://github.com/small-hack/argocd-apps"
      # path in the argo repo to point to. Trailing slash very important!
      # if you want to use cockroachdb, change to zitadel/zitadel_and_cockroachdb
      path: "zitadel/zitadel_and_postgresql"
      # either the branch or tag to point at in the argo repo above
      ref: "main"
      # namespace to install the k8s app in
      namespace: "zitadel"
      # source repos for Argo CD App Project (in addition to argo.repo)
      project:
        source_repos:
          - "https://charts.zitadel.com"
          - "https://zitadel.github.io/zitadel-charts"
          - "https://charts.cockroachdb.com/"
          - "registry-1.docker.io"
        destination:
          namespaces:
            - argocd
            - zitadel
